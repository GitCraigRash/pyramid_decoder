class Solution:
    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:

        def prospect(grid,visited,routes):
            route_limit = len(routes)-1

            if routes[0][1] != 0:
                print("1a",grid[routes[0][0]][routes[0][1]-1])
                if grid[routes[0][0]][routes[0][1]-1] == 1:
                    print("1b")
                    if [routes[0][0],routes[0][1]-1] in visited == False:
                        print("1c")
                        routes.append([routes[0][0],routes[0][1]-1])
                        
            if routes[0][1] != len(grid[0])-1:
                print("2a")
                if grid[routes[0][0]][routes[0][1]+1] == 1:
                    print("2b",[routes[0][0],routes[0][1]+1])
                    if [routes[0][0],routes[0][1]+1] in visited == False:
                        print("2c")
                        routes.append([routes[0][0],routes[0][1]+1])
            if routes[0][0] != 0:
                print("3a")
                if grid[routes[0][0]-1][routes[0][1]] == 1:
                    print("3b",[routes[0][0]-1,routes[0][1]])
                    if [routes[0][0]-1,routes[0][1]] in visited == False:
                        print("3c")
                        routes.append([routes[0][0]-1, routes[0][1]])
            if routes[0][0] != len(grid)-1:
                print("4a")
                if grid[routes[0][0]+1][routes[0][1]] == 1:
                    print("4b")
                    if [routes[0][0]+1, routes[0][1]] in visited == False:
                        print("4c")
                        routes.append([routes[0][0]+1,routes[0][1]])
            print("new routes: ", routes[route_limit:])
            visited.append(routes[0])
            routes.remove(routes[0])
            print("routes: ",routes)
            print("visited: ",visited)
            if routes == []:
                return visited
            while routes[0] not in visited:
                visited = prospect(grid,visited,routes)
            return visited


        visited = []
        islands = []
        routes = []
        for i,row in enumerate(grid):
            for k, cell in enumerate(row):
                if cell == 1 and [i,k] not in visited:
                    routes.append([i,k])
                    visited_mask = len(visited)-1
                    visited = prospect(grid,visited,routes)
                    islands.append(len(visited[visited_mask:]))
                    print("islands", islands)
        if islands == []:
            return 0
        return max(islands)

        # define border cells 
            # n  %  side = 0 
            # OR n %  side = side - 1 
            # OR n > side 
            # OR n - side squared  < side
        # check each cell for land
        # once land is found start recurrsion
            # add for to parameter total
            # instantiate visited
            # create list of possibile routes
            # if route has already been visited
                # subtract two from parameter
            # Add cell to visited
            # if no routes exist
                # return parameter and visited cells
            # Visit new cell
        # if water is found in a internal cell, 
        # call recurrsion
            # instantiate water visited
            # create list of possibile routes
            # if route is boarder
                # return 0
            # if route is land
                # Perimeter change + 1
            # if route is water
                # add to route
            # Add cell to visited
            # if no routes exist
                # return parameter_change and visited cells
            # Visit new cell
